import { AlertTriangle, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import type { DisasterAlert } from "@/lib/types";

function getAlertIcon(category: string): string {
  const icons: Record<string, string> = {
    cyclone: "🌪️",
    flood: "🌊",
    fire: "🔥",
    earthquake: "🌍",
    storm: "⛈️",
    drought: "🏜️",
    volcano: "🌋",
  };
  
  return icons[category.toLowerCase()] || "⚠️";
}

export default function DisasterAlerts(): JSX.Element {
  const [isVisible, setIsVisible] = useState(true);

  const { data: alerts = [], isLoading } = useQuery<DisasterAlert[]>({
    queryKey: ["api", "alerts"],
    refetchInterval: 300000, // Refresh every 5 minutes
    retry: 3,
  });

  if (!isVisible) return null;

  const renderAlertContent = () => {
    if (isLoading) {
      return (
        <div className="flex items-center space-x-2">
          <div className="h-4 w-32 bg-emergency-foreground/20 rounded animate-pulse" />
          <div className="h-4 w-48 bg-emergency-foreground/20 rounded animate-pulse" />
          <div className="h-4 w-40 bg-emergency-foreground/20 rounded animate-pulse" />
        </div>
      );
    }

    if (alerts.length === 0) {
      return "No active alerts in your area at this time";
    }

    return (
      <div className="alert-ticker whitespace-nowrap">
        {alerts.slice(0, 3).map((alert, index) => (
          <span key={alert.id} className="inline-flex items-center">
            {index > 0 && <span className="mx-3">•</span>}
            <span className="mr-1">{getAlertIcon(alert.category)}</span>
            <span className="font-medium">{alert.title}:</span>
            <span className="ml-1 text-emergency-foreground/90">{alert.description}</span>
          </span>
        ))}
      </div>
    );
  };

  return (
    <section className="bg-emergency text-emergency-foreground border-b-2 border-emergency">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
        <div className="flex items-center space-x-3">
          <div className="flex items-center space-x-2 flex-shrink-0">
            <AlertTriangle className={`h-5 w-5 ${alerts.length > 0 ? 'animate-pulse' : ''}`} />
            <span className="font-semibold text-sm uppercase tracking-wide">
              Live Alerts
            </span>
          </div>
          
          <div className="overflow-hidden flex-1">
            {renderAlertContent()}
          </div>
          
          <Button
            variant="ghost"
            size="sm"
            className="flex-shrink-0 text-emergency-foreground hover:bg-red-700 p-1 h-auto"
            onClick={() => setIsVisible(false)}
            data-testid="button-close-alerts"
          >
            <X className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </section>
  );
}